From 0b0e49c1e3400ac9cc5abc25f011d25f00886cf7 Mon Sep 17 00:00:00 2001
From: Pedro Brochado <pedropsb95@gmail.com>
Date: Fri, 18 Jul 2025 17:27:51 -0300
Subject: [PATCH 1/4] Add deprecation warning when using DEFAULT_FILE_STORAGE

---
2.50.1


From 362ff9e70fe43eb0f647b69c29812ef0bca8df9f Mon Sep 17 00:00:00 2001
From: Matthias Dellweg <mdellweg@redhat.com>
Date: Fri, 6 Jun 2025 17:26:24 +0200
Subject: [PATCH 3/4] Add db_trigger for Task.pulp_created

The trigger instanciated on the database side will ensure operational
safety for the tasks by guaranteeing pulp_created timestamps will commit
to the database in their natural order for each individual resource.
---
 .../migrations/0134_task_insert_trigger.py    | 81 +++++++++++++++++++
 pulpcore/tasking/tasks.py                     | 28 +------
 2 files changed, 82 insertions(+), 27 deletions(-)
 create mode 100644 pulpcore/app/migrations/0134_task_insert_trigger.py

diff --git a/pulpcore/app/migrations/0134_task_insert_trigger.py b/pulpcore/app/migrations/0134_task_insert_trigger.py
new file mode 100644
index 000000000..4ba4c2771
--- /dev/null
+++ b/pulpcore/app/migrations/0134_task_insert_trigger.py
@@ -0,0 +1,81 @@
+# Generated by Django 4.2.22 on 2025-06-06 14:32
+
+from django.db import migrations
+from pulpcore.migrations import RequireVersion
+
+# This migration is supposed to be zero downtime upgrade safe.
+
+
+TASK_INSERT_TRIGGER_UP = """
+CREATE FUNCTION on_insert_timestamp_task()
+  RETURNS TRIGGER
+  LANGUAGE plpgsql
+  AS $$
+    DECLARE
+      res_list text[];
+      res_list_shared text[];
+    BEGIN
+      res_list := array_agg(q.res) FROM (SELECT regexp_replace(unnest(NEW.reserved_resources_record), '^shared:', '') res) AS q;
+      res_list_shared := array_agg(q.res) FROM (SELECT 'shared:' || unnest(res_list) AS res) AS q;
+      PERFORM pg_advisory_xact_lock(4711, q.id) FROM (SELECT hashtext(res) AS id FROM unnest(res_list) AS res ORDER BY id) AS q;
+      NEW.pulp_created = clock_timestamp();
+      IF NEW.pulp_created <= (
+        SELECT max(pulp_created) FROM core_task
+        WHERE
+          state NOT IN ('completed', 'failed', 'canceled', 'skipped')
+        AND
+          reserved_resources_record && (res_list || res_list_shared)
+      )
+      THEN
+        RAISE EXCEPTION 'Clock screw detected.';
+      END IF;
+      RETURN NEW;
+    END;
+  $$
+;
+
+CREATE FUNCTION on_update_timestamp_task()
+  RETURNS TRIGGER
+  LANGUAGE plpgsql
+  AS $$
+    BEGIN
+      -- This is mainly a safeguard to prevent old code from messing with the timestamp, now that the database is in charge.
+      RAISE EXCEPTION 'Updating pulp_created is not allowed.';
+    END;
+  $$
+;
+
+CREATE TRIGGER on_insert_timestamp_task_trigger
+  BEFORE INSERT
+  ON core_task
+  FOR EACH ROW
+  EXECUTE FUNCTION on_insert_timestamp_task()
+;
+
+CREATE TRIGGER on_update_timestamp_task_trigger
+  BEFORE UPDATE
+  ON core_task
+  FOR EACH ROW
+  WHEN (OLD.pulp_created <> NEW.pulp_created)
+  EXECUTE FUNCTION on_update_timestamp_task()
+;
+"""
+
+TASK_INSERT_TRIGGER_DOWN = """
+DROP TRIGGER on_update_timestamp_task_trigger on core_task;
+DROP TRIGGER on_insert_timestamp_task_trigger on core_task;
+DROP FUNCTION on_update_timestamp_task;
+DROP FUNCTION on_insert_timestamp_task;
+"""
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ("core", "0133_repositoryversion_content_ids"),
+    ]
+
+    operations = [
+        RequireVersion("core", "3.82.1"),
+        migrations.RunSQL(sql=TASK_INSERT_TRIGGER_UP, reverse_sql=TASK_INSERT_TRIGGER_DOWN),
+    ]
diff --git a/pulpcore/tasking/tasks.py b/pulpcore/tasking/tasks.py
index aa299c4f9..3c3dfc8b7 100644
--- a/pulpcore/tasking/tasks.py
+++ b/pulpcore/tasking/tasks.py
@@ -9,12 +9,11 @@ import traceback
 import tempfile
 import threading
 from asgiref.sync import sync_to_async
-from datetime import timedelta
 from gettext import gettext as _
 
 from django.conf import settings
 from django.db import connection, transaction
-from django.db.models import Model, Max
+from django.db.models import Model
 from django_guid import get_guid
 from pulpcore.app.apps import MODULE_PLUGIN_VERSIONS
 from pulpcore.app.models import Task, TaskGroup
@@ -23,7 +22,6 @@ from pulpcore.constants import (
     TASK_FINAL_STATES,
     TASK_INCOMPLETE_STATES,
     TASK_STATES,
-    TASK_DISPATCH_LOCK,
     IMMEDIATE_TIMEOUT,
 )
 from pulpcore.middleware import x_task_diagnostics_var
@@ -228,13 +226,6 @@ def dispatch(
     notify_workers = False
     with contextlib.ExitStack() as stack:
         with transaction.atomic():
-            # Task creation need to be serialized so that pulp_created will provide a stable order
-            # at every time. We specifically need to ensure that each task, when committed to the
-            # task table will be the newest with respect to `pulp_created`.
-            with connection.cursor() as cursor:
-                # Wait for exclusive access and release automatically after transaction.
-                cursor.execute("SELECT pg_advisory_xact_lock(%s, %s)", [0, TASK_DISPATCH_LOCK])
-            newest_created = Task.objects.aggregate(Max("pulp_created"))["pulp_created__max"]
             task = Task.objects.create(
                 state=TASK_STATES.WAITING,
                 logging_cid=(get_guid()),
@@ -250,23 +241,6 @@ def dispatch(
                 profile_options=x_task_diagnostics_var.get(None),
             )
             task.refresh_from_db()  # The database may have assigned a timestamp for us.
-            if newest_created and task.pulp_created <= newest_created:
-                # Let this workaround not row forever into the future.
-                if newest_created - task.pulp_created > timedelta(seconds=1):
-                    # Do not commit the transaction if this condition is not met.
-                    # If we ever hit this, think about delegating the timestamping to PostgresQL.
-                    raise RuntimeError("Clockscrew detected. Task dispatching would be dangerous.")
-                # Try to work around the smaller glitch
-                task.pulp_created = newest_created + timedelta(milliseconds=1)
-                task.save()
-            if task_group:
-                task_group.refresh_from_db()
-                if task_group.all_tasks_dispatched:
-                    task.set_canceling()
-                    task.set_canceled(
-                        TASK_STATES.CANCELED, "All tasks in group have been dispatched/canceled."
-                    )
-                    return task
             if immediate:
                 # Grab the advisory lock before the task hits the db.
                 stack.enter_context(task)
-- 
2.50.1


From a7cea4bf7769bb7a1810e8a5651c847fd315d1ea Mon Sep 17 00:00:00 2001
From: Matthias Dellweg <mdellweg@redhat.com>
Date: Mon, 7 Jul 2025 13:41:11 +0200
Subject: [PATCH 4/4] Add a GinIndex for array ops on task resources

We limit the index to unfinished tasks because that's the only states we
care about resource locking.
---
 .../0135_task_pulp_task_resources_index.py    | 25 +++++++++++++++++++
 pulpcore/app/models/task.py                   |  7 ++++++
 2 files changed, 32 insertions(+)
 create mode 100644 pulpcore/app/migrations/0135_task_pulp_task_resources_index.py

diff --git a/pulpcore/app/migrations/0135_task_pulp_task_resources_index.py b/pulpcore/app/migrations/0135_task_pulp_task_resources_index.py
new file mode 100644
index 000000000..f49e0d2f8
--- /dev/null
+++ b/pulpcore/app/migrations/0135_task_pulp_task_resources_index.py
@@ -0,0 +1,25 @@
+# Generated by Django 4.2.22 on 2025-07-07 11:07
+
+import django.contrib.postgres.indexes
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ("core", "0134_task_insert_trigger"),
+    ]
+
+    operations = [
+        migrations.AddIndex(
+            model_name="task",
+            index=django.contrib.postgres.indexes.GinIndex(
+                condition=models.Q(
+                    ("state__in", ["completed", "failed", "canceled", "skipped"]), _negated=True
+                ),
+                fields=["reserved_resources_record"],
+                name="pulp_task_resources_index",
+                opclasses=["array_ops"],
+            ),
+        ),
+    ]
diff --git a/pulpcore/app/models/task.py b/pulpcore/app/models/task.py
index 2e5de7663..4eaa42df1 100644
--- a/pulpcore/app/models/task.py
+++ b/pulpcore/app/models/task.py
@@ -9,6 +9,7 @@ from gettext import gettext as _
 
 from django.conf import settings
 from django.contrib.postgres.fields import ArrayField, HStoreField
+from django.contrib.postgres.indexes import GinIndex
 from django.core.serializers.json import DjangoJSONEncoder
 from django.db import connection, models
 from django.utils import timezone
@@ -348,6 +349,12 @@ class Task(BaseModel, AutoAddObjPermsMixin):
             models.Index(fields=["unblocked_at"]),
             models.Index(fields=["state"]),
             models.Index(fields=["state", "pulp_created"]),
+            GinIndex(
+                name="pulp_task_resources_index",
+                fields=["reserved_resources_record"],
+                condition=~models.Q(state__in=["completed", "failed", "canceled", "skipped"]),
+                opclasses=["array_ops"],
+            ),
         ]
         permissions = [
             ("manage_roles_task", "Can manage role assignments on task"),
-- 
2.50.1

